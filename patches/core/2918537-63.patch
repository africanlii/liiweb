-diff --git a/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php b/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
-index ca8114dad..0fd07c7a0 100644
---- a/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
-+++ b/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
-@@ -43,7 +43,7 @@ public static function create(ContainerInterface $container) {
-    * {@inheritdoc}
-    */
-   public function validate($entity, Constraint $constraint) {
--    if (isset($entity) && !$entity->isNew() && !$entity->isDefaultRevision()) {
-+    if (!empty($entity->book) && !$entity->isNew() && !$entity->isDefaultRevision()) {
-       /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
-       $original = $this->bookManager->loadBookLink($entity->id(), FALSE) ?: [
-         'bid' => 0,
-@@ -53,23 +53,33 @@ public function validate($entity, Constraint $constraint) {
-         $original['pid'] = -1;
-       }
-
--      if ($entity->book['bid'] != $original['bid']) {
--        $this->context->buildViolation($constraint->message)
--          ->atPath('book.bid')
--          ->setInvalidValue($entity)
--          ->addViolation();
--      }
--      if ($entity->book['pid'] != $original['pid']) {
--        $this->context->buildViolation($constraint->message)
--          ->atPath('book.pid')
--          ->setInvalidValue($entity)
--          ->addViolation();
--      }
--      if ($entity->book['weight'] != $original['weight']) {
--        $this->context->buildViolation($constraint->message)
--          ->atPath('book.weight')
--          ->setInvalidValue($entity)
--          ->addViolation();
-+      // Validate the book structure when the user has access to manage book
-+      // outlines. When the user can manage book outlines, the book variable
-+      // will be populated even if the node is not part of the book.
-+      // If the user cannot manage book outlines, the book variable will be
-+      // empty and we can safely ignore the constraints as the outline cannot
-+      // be changed by this user.
-+      if (!empty($entity->book)) {
-+        if ($entity->book['bid'] != $original['bid']) {
-+          $this->context->buildViolation($constraint->message)
-+            ->atPath('book.bid')
-+            ->setInvalidValue($entity)
-+            ->addViolation();
-+        }
-+        // We add this to remove the constraint when the node is not a true
-+        // book.
-+        if ($original['pid'] !== -1 && $entity->book['pid'] != $original['pid']) {
-+          $this->context->buildViolation($constraint->message)
-+            ->atPath('book.pid')
-+            ->setInvalidValue($entity)
-+            ->addViolation();
-+        }
-+        if ($entity->book['weight'] != $original['weight']) {
-+          $this->context->buildViolation($constraint->message)
-+            ->atPath('book.weight')
-+            ->setInvalidValue($entity)
-+            ->addViolation();
-+        }
-       }
-     }
-   }
-diff --git a/core/modules/book/tests/src/Functional/BookContentModerationTest.php b/core/modules/book/tests/src/Functional/BookContentModerationTest.php
-index 6a1ce9c78..4e591a1e3 100644
---- a/core/modules/book/tests/src/Functional/BookContentModerationTest.php
-+++ b/core/modules/book/tests/src/Functional/BookContentModerationTest.php
-@@ -15,6 +15,13 @@ class BookContentModerationTest extends BrowserTestBase {
-   use BookTestTrait;
-   use ContentModerationTestTrait;
-
-+  /**
-+   * A user with permission to make workflow transitions but not manage books.
-+   *
-+   * @var \Drupal\user\UserInterface
-+   */
-+  protected $nonBookAdminUser;
-+
-   /**
-    * Modules to install.
-    *
-@@ -41,7 +48,29 @@ protected function setUp() {
-     $workflow->save();
-
-     // We need a user with additional content moderation permissions.
--    $this->bookAuthor = $this->drupalCreateUser(['create new books', 'create book content', 'edit own book content', 'add content to books', 'access printer-friendly version', 'view any unpublished content', 'use editorial transition create_new_draft', 'use editorial transition publish']);
-+    $this->bookAuthor = $this->drupalCreateUser([
-+      'create new books',
-+      'create book content',
-+      'edit any book content',
-+      'add content to books',
-+      'access printer-friendly version',
-+      'view any unpublished content',
-+      'use editorial transition create_new_draft',
-+      'use editorial transition publish'
-+    ]);
-+
-+    // Another user without manage book permissions to test updates to nodes
-+    // that are
-+    // 1. Not part of a book outline.
-+    // 2. Part of a book outline.
-+    $this->nonBookAdminUser = $this->drupalCreateUser([
-+      'create book content',
-+      'edit own book content',
-+      'use editorial transition create_new_draft',
-+      'use editorial transition publish',
-+      'access printer-friendly version',
-+      'view any unpublished content',
-+    ]);
-   }
-
-   /**
-@@ -138,7 +167,120 @@ public function testBookWithPendingRevisions() {
-     ];
-     $this->drupalPostForm('node/' . $book_1_nodes[1]->id() . '/edit', $edit, t('Save'));
-
--    $this->assertSession()->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+    $this->assertSession()
-+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+  }
-+
-+  /**
-+   * Tests that users who cannot manage books can still make node updates.
-+   */
-+  public function testNonBookAdminNodeUpdates() {
-+    // 1. First test that users who cannot manage books can make updates to
-+    // nodes that are not part of a book outline.
-+    $this->drupalLogin($this->nonBookAdminUser);
-+    // Create a new book page without actually attaching it to a book and create
-+    // a draft.
-+    $edit = [
-+      'title[0][value]' => 'Some moderated content',
-+      'moderation_state[0][state]' => 'draft',
-+    ];
-+    $this->drupalPostForm('node/add/book', $edit, t('Save'));
-+    $this->assertSession()
-+      ->pageTextContains('Some moderated content has been created.');
-+    $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
-+    $this->assertNotEmpty($node);
-+    // Publish the content.
-+    $edit = [
-+      'body[0][value]' => 'Second change non book admin user',
-+      'moderation_state[0][state]' => 'published',
-+    ];
-+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
-+    $this->assertSession()
-+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+    $this->assertSession()
-+      ->pageTextContains('Some moderated content has been updated');
-+    // Now update content again, it should be successfully updated and not throw
-+    // any errors.
-+    $edit = [
-+      'moderation_state[0][state]' => 'draft',
-+    ];
-+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
-+    $this->assertSession()
-+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+    $this->assertSession()
-+      ->pageTextContains('Some moderated content has been updated');
-+    // 2. Now test that users who cannot manage books can make updates to nodes
-+    // that are part of a book outline. As the non admin book user, publish the
-+    // content created above in order to be added to a book.
-+    $edit = [
-+      'moderation_state[0][state]' => 'published',
-+    ];
-+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
-+    // Create a book (as a book admin user).
-+    $book_1_nodes = $this->createBook(['moderation_state[0][state]' => 'published']);
-+    $book_1 = $this->book;
-+    // Now add the node created previously by the non book admin user to the
-+    // book created above.
-+    $this->drupalLogin($this->bookAuthor);
-+    $edit = [
-+      'moderation_state[0][state]' => 'published',
-+    ];
-+    $this->addNodeToBook($this->book->id(), $node->id(), $edit);
-+    // Assert that the node has been added to the book.
-+    $this->assertSession()
-+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+    $this->assertSession()
-+      ->pageTextContains('Some moderated content has been updated');
-+    $this->checkBookNode($book_1, [
-+      $book_1_nodes[0],
-+      $book_1_nodes[3],
-+      $book_1_nodes[4],
-+      $node,
-+    ], FALSE, FALSE, $book_1_nodes[0], []);
-+    // Try to update the non book admin's node in the book as the user
-+    // that cannot manage books, it should be successfully updated and not
-+    // throw any errors.
-+    $this->drupalLogin($this->nonBookAdminUser);
-+    $edit = [
-+      'body[0][value]' => 'Change by non book admin user again',
-+      'moderation_state[0][state]' => 'draft',
-+    ];
-+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
-+    $this->assertSession()
-+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
-+    $this->assertSession()
-+      ->pageTextContains('Some moderated content has been updated');
-+    // Check that the book outline did not change.
-+    $this->book = $book_1;
-+    $this->checkBookNode($book_1, [
-+      $book_1_nodes[0],
-+      $book_1_nodes[3],
-+      $book_1_nodes[4],
-+      $node,
-+    ], FALSE, FALSE, $book_1_nodes[0], []);
-+    $this->checkBookNode($book_1_nodes[0], [
-+      $book_1_nodes[1],
-+      $book_1_nodes[2]
-+    ], $book_1, $book_1, $book_1_nodes[1], [$book_1]);
-+  }
-+
-+  /**
-+   * Adds a node to a book.
-+   *
-+   * @param int $book_nid
-+   *   A book node ID to add a node to.
-+   * @param int $nid
-+   *   The node ID that needs to be added to a book.
-+   * @param array $edit
-+   *   (optional) Field data in an associative array. Changes the current input
-+   *   fields (where possible) to the values indicated. Defaults to an empty
-+   *   array.
-+   */
-+  public function addNodeToBook($book_nid, $nid, $edit = []) {
-+    if ($book_nid) {
-+      $edit['book[bid]'] = $book_nid;
-+      $this->drupalPostForm('node/' . $nid . '/edit', $edit, t('Save'));
-+    }
-   }
-
- }
diff --git a/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php b/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
index ca8114dad..0fd07c7a0 100644
--- a/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
+++ b/core/modules/book/src/Plugin/Validation/Constraint/BookOutlineConstraintValidator.php
@@ -43,7 +43,7 @@ public static function create(ContainerInterface $container) {
    * {@inheritdoc}
    */
   public function validate($entity, Constraint $constraint) {
-    if (isset($entity) && !$entity->isNew() && !$entity->isDefaultRevision()) {
+    if (!empty($entity->book) && !$entity->isNew() && !$entity->isDefaultRevision()) {
       /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
       $original = $this->bookManager->loadBookLink($entity->id(), FALSE) ?: [
         'bid' => 0,
@@ -53,23 +53,33 @@ public function validate($entity, Constraint $constraint) {
         $original['pid'] = -1;
       }

-      if ($entity->book['bid'] != $original['bid']) {
-        $this->context->buildViolation($constraint->message)
-          ->atPath('book.bid')
-          ->setInvalidValue($entity)
-          ->addViolation();
-      }
-      if ($entity->book['pid'] != $original['pid']) {
-        $this->context->buildViolation($constraint->message)
-          ->atPath('book.pid')
-          ->setInvalidValue($entity)
-          ->addViolation();
-      }
-      if ($entity->book['weight'] != $original['weight']) {
-        $this->context->buildViolation($constraint->message)
-          ->atPath('book.weight')
-          ->setInvalidValue($entity)
-          ->addViolation();
+      // Validate the book structure when the user has access to manage book
+      // outlines. When the user can manage book outlines, the book variable
+      // will be populated even if the node is not part of the book.
+      // If the user cannot manage book outlines, the book variable will be
+      // empty and we can safely ignore the constraints as the outline cannot
+      // be changed by this user.
+      if (!empty($entity->book)) {
+        if ($entity->book['bid'] != $original['bid']) {
+          $this->context->buildViolation($constraint->message)
+            ->atPath('book.bid')
+            ->setInvalidValue($entity)
+            ->addViolation();
+        }
+        // We add this to remove the constraint when the node is not a true
+        // book.
+        if ($original['pid'] !== -1 && $entity->book['pid'] != $original['pid']) {
+          $this->context->buildViolation($constraint->message)
+            ->atPath('book.pid')
+            ->setInvalidValue($entity)
+            ->addViolation();
+        }
+        if ($entity->book['weight'] != $original['weight']) {
+          $this->context->buildViolation($constraint->message)
+            ->atPath('book.weight')
+            ->setInvalidValue($entity)
+            ->addViolation();
+        }
       }
     }
   }
diff --git a/core/modules/book/tests/src/Functional/BookContentModerationTest.php b/core/modules/book/tests/src/Functional/BookContentModerationTest.php
index 6a1ce9c78..1aaab4945 100644
--- a/core/modules/book/tests/src/Functional/BookContentModerationTest.php
+++ b/core/modules/book/tests/src/Functional/BookContentModerationTest.php
@@ -15,6 +15,13 @@ class BookContentModerationTest extends BrowserTestBase {
   use BookTestTrait;
   use ContentModerationTestTrait;

+  /**
+   * A user with permission to make workflow transitions but not manage books.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected $nonBookAdminUser;
+
   /**
    * Modules to install.
    *
@@ -41,7 +48,20 @@ protected function setUp() {
     $workflow->save();

     // We need a user with additional content moderation permissions.
-    $this->bookAuthor = $this->drupalCreateUser(['create new books', 'create book content', 'edit own book content', 'add content to books', 'access printer-friendly version', 'view any unpublished content', 'use editorial transition create_new_draft', 'use editorial transition publish']);
+    $this->bookAuthor = $this->drupalCreateUser(['create new books', 'create book content', 'edit any book content', 'add content to books', 'access printer-friendly version', 'view any unpublished content', 'use editorial transition create_new_draft', 'use editorial transition publish']);
+
+    // Another user without manage book permissions to test updates to nodes
+    // that are
+    // 1. Not part of a book outline.
+    // 2. Part of a book outline.
+    $this->nonBookAdminUser = $this->drupalCreateUser([
+      'create book content',
+      'edit own book content',
+      'use editorial transition create_new_draft',
+      'use editorial transition publish',
+      'access printer-friendly version',
+      'view any unpublished content',
+    ]);
   }

   /**
@@ -141,4 +161,116 @@ public function testBookWithPendingRevisions() {
     $this->assertSession()->pageTextNotContains('You can only change the book outline for the published version of this content.');
   }

+  /**
+   * Tests that users who cannot manage books can still make node updates.
+   */
+  public function testNonBookAdminNodeUpdates() {
+    // 1. First test that users who cannot manage books can make updates to
+    // nodes that are not part of a book outline.
+    $this->drupalLogin($this->nonBookAdminUser);
+    // Create a new book page without actually attaching it to a book and create
+    // a draft.
+    $edit = [
+      'title[0][value]' => 'Some moderated content',
+      'moderation_state[0][state]' => 'draft',
+    ];
+    $this->drupalPostForm('node/add/book', $edit, t('Save'));
+    $this->assertSession()
+      ->pageTextContains('Some moderated content has been created.');
+    $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
+    $this->assertNotEmpty($node);
+    // Publish the content.
+    $edit = [
+      'body[0][value]' => 'Second change non book admin user',
+      'moderation_state[0][state]' => 'published',
+    ];
+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->assertSession()
+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
+    $this->assertSession()
+      ->pageTextContains('Some moderated content has been updated');
+    // Now update content again, it should be successfully updated and not throw
+    // any errors.
+    $edit = [
+      'moderation_state[0][state]' => 'draft',
+    ];
+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->assertSession()
+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
+    $this->assertSession()
+      ->pageTextContains('Some moderated content has been updated');
+    // 2. Now test that users who cannot manage books can make updates to nodes
+    // that are part of a book outline. As the non admin book user, publish the
+    // content created above in order to be added to a book.
+    $edit = [
+      'moderation_state[0][state]' => 'published',
+    ];
+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    // Create a book (as a book admin user).
+    $book_1_nodes = $this->createBook(['moderation_state[0][state]' => 'published']);
+    $book_1 = $this->book;
+    // Now add the node created previously by the non book admin user to the
+    // book created above.
+    $this->drupalLogin($this->bookAuthor);
+    $edit = [
+      'moderation_state[0][state]' => 'published',
+    ];
+    $this->addNodeToBook($this->book->id(), $node->id(), $edit);
+    // Assert that the node has been added to the book.
+    $this->assertSession()
+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
+    $this->assertSession()
+      ->pageTextContains('Some moderated content has been updated');
+    $this->checkBookNode($book_1, [
+      $book_1_nodes[0],
+      $book_1_nodes[3],
+      $book_1_nodes[4],
+      $node,
+    ], FALSE, FALSE, $book_1_nodes[0], []);
+    // Try to update the non book admin's node in the book as the user
+    // that cannot manage books, it should be successfully updated and not
+    // throw any errors.
+    $this->drupalLogin($this->nonBookAdminUser);
+    $edit = [
+      'body[0][value]' => 'Change by non book admin user again',
+      'moderation_state[0][state]' => 'draft',
+    ];
+    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->assertSession()
+      ->pageTextNotContains('You can only change the book outline for the published version of this content.');
+    $this->assertSession()
+      ->pageTextContains('Some moderated content has been updated');
+    // Check that the book outline did not change.
+    $this->book = $book_1;
+    $this->checkBookNode($book_1, [
+      $book_1_nodes[0],
+      $book_1_nodes[3],
+      $book_1_nodes[4],
+      $node,
+    ], FALSE, FALSE, $book_1_nodes[0], []);
+    $this->checkBookNode($book_1_nodes[0], [
+      $book_1_nodes[1],
+      $book_1_nodes[2]
+    ], $book_1, $book_1, $book_1_nodes[1], [$book_1]);
+  }
+
+  /**
+   * Adds a node to a book.
+   *
+   * @param int $book_nid
+   *   A book node ID to add a node to.
+   * @param int $nid
+   *   The node ID that needs to be added to a book.
+   * @param array $edit
+   *   (optional) Field data in an associative array. Changes the current input
+   *   fields (where possible) to the values indicated. Defaults to an empty
+   *   array.
+   */
+  public function addNodeToBook($book_nid, $nid, $edit = []) {
+    if ($book_nid) {
+      $edit['book[bid]'] = $book_nid;
+      $this->drupalPostForm('node/' . $nid . '/edit', $edit, t('Save'));
+    }
+  }
+
 }
