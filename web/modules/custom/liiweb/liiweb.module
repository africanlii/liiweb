<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\liiweb\Plugin\LanguageNegotiation\LanguageNegotiationFrbrUri;
use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrlFallback;

/**
 * Implements hook_node_presave().
 */
function liiweb_node_presave(NodeInterface $node) {
  if ($node->isDefaultRevision() && !empty($node->field_frbr_uri->value)) {
    $aliasSource = '/node/' . $node->id();
    /** @var \Drupal\Core\Path\AliasStorageInterface $pathService */
    $pathService = \Drupal::service('path.alias_storage');
    if (!$pathService->aliasExists($node->field_frbr_uri->value, $node->language()->getId())) {
      $node->path = [
        'alias' => $node->field_frbr_uri->value,
        'pathauto' => 0,
      ];
    }

    if ($node->isDefaultTranslation()) {
      $pathService->delete([
        'source' => $aliasSource,
      ]);

      $languages = $node->getTranslationLanguages(FALSE);
      foreach ($languages as $language) {
        $langcode = $language->getId();
        if (!$node->hasTranslation($langcode)) {
          continue;
        }
        $translation = $node->getTranslation($langcode);
        if (empty($translation->field_frbr_uri->value)) {
          continue;
        }
        $pathService->save($aliasSource, $translation->field_frbr_uri->value, $langcode);
      }
    }
  }

}

/**
 * Implements hook_language_types_info_alter().
 */
function liiweb_language_types_info_alter(array &$language_types) {
  $language_types[LanguageInterface::TYPE_URL]['fixed'] = [LanguageNegotiationFrbrUri::METHOD_ID, LanguageNegotiationUrlFallback::METHOD_ID];
}


/**
 * Implements hook_entity_type_alter().
 */
function liiweb_entity_type_alter(array &$entity_types) {
  $entity_types['node']->addConstraint('UniqueURI', []);
}
